# DSA
def countP_subs(sub_str, sub_str_2, s):

    if (sub_str > sub_str_2):
        #    Invalid substring.
        return 0

    if (sub_str == sub_str_2):
        #    Every single character in the string is a palindrome itself.
        return 1

    elif (s[sub_str] == s[sub_str_2]):
        return (1 + countP_subs(sub_str + 1, sub_str_2, s) + countP_subs(sub_str, sub_str_2 - 1, s))
    else:
        return ((countP_subs(sub_str + 1, sub_str_2, s) + countP_subs(sub_str, sub_str_2 - 1, s))- countP_subs(sub_str + 1, sub_str_2 - 1, s))
def countP_subs1(s):

    return countP_subs(0, len(s) - 1, s)

countP_subs1("ancdef")
